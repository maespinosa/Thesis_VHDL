
################################################################
# This is a generated script based on design: sim_node
#
# Though there are limitations about the generated script,
# the main purpose of this utility is to make learning
# IP Integrator Tcl commands easier.
################################################################

################################################################
# Check if script is running in correct Vivado version.
################################################################
set scripts_vivado_version 2015.4
set current_vivado_version [version -short]

if { [string first $scripts_vivado_version $current_vivado_version] == -1 } {
   puts ""
   puts "ERROR: This script was generated using Vivado <$scripts_vivado_version> and is being run in <$current_vivado_version> of Vivado. Please run the script in Vivado <$scripts_vivado_version> then open the design in Vivado <$current_vivado_version>. Upgrade the design by running \"Tools => Report => Report IP Status...\", then run write_bd_tcl to create an updated script."

   return 1
}

################################################################
# START
################################################################

# To test this script, run the following commands from Vivado Tcl console:
# source sim_node_script.tcl

# If you do not already have a project created,
# you can create a project using the following command:
#    create_project project_1 myproj -part xc7a100tcsg324-1

# CHECKING IF PROJECT EXISTS
if { [get_projects -quiet] eq "" } {
   puts "ERROR: Please open or create a project!"
   return 1
}



# CHANGE DESIGN NAME HERE
set design_name sim_node

# If you do not already have an existing IP Integrator design open,
# you can create a design using the following command:
#    create_bd_design $design_name

# Creating design if needed
set errMsg ""
set nRet 0

set cur_design [current_bd_design -quiet]
set list_cells [get_bd_cells -quiet]

if { ${design_name} eq "" } {
   # USE CASES:
   #    1) Design_name not set

   set errMsg "ERROR: Please set the variable <design_name> to a non-empty value."
   set nRet 1

} elseif { ${cur_design} ne "" && ${list_cells} eq "" } {
   # USE CASES:
   #    2): Current design opened AND is empty AND names same.
   #    3): Current design opened AND is empty AND names diff; design_name NOT in project.
   #    4): Current design opened AND is empty AND names diff; design_name exists in project.

   if { $cur_design ne $design_name } {
      puts "INFO: Changing value of <design_name> from <$design_name> to <$cur_design> since current design is empty."
      set design_name [get_property NAME $cur_design]
   }
   puts "INFO: Constructing design in IPI design <$cur_design>..."

} elseif { ${cur_design} ne "" && $list_cells ne "" && $cur_design eq $design_name } {
   # USE CASES:
   #    5) Current design opened AND has components AND same names.

   set errMsg "ERROR: Design <$design_name> already exists in your project, please set the variable <design_name> to another value."
   set nRet 1
} elseif { [get_files -quiet ${design_name}.bd] ne "" } {
   # USE CASES: 
   #    6) Current opened design, has components, but diff names, design_name exists in project.
   #    7) No opened design, design_name exists in project.

   set errMsg "ERROR: Design <$design_name> already exists in your project, please set the variable <design_name> to another value."
   set nRet 2

} else {
   # USE CASES:
   #    8) No opened design, design_name not in project.
   #    9) Current opened design, has components, but diff names, design_name not in project.

   puts "INFO: Currently there is no design <$design_name> in project, so creating one..."

   create_bd_design $design_name

   puts "INFO: Making design <$design_name> as current_bd_design."
   current_bd_design $design_name

}

puts "INFO: Currently the variable <design_name> is equal to \"$design_name\"."

if { $nRet != 0 } {
   puts $errMsg
   return $nRet
}


##################################################################
# MIG PRJ FILE TCL PROCs
##################################################################

proc write_mig_file_sim_node_mig_7series_0_1 { str_mig_prj_filepath } {

   set mig_prj_file [open $str_mig_prj_filepath  w+]

   puts $mig_prj_file {<?xml version='1.0' encoding='UTF-8'?>}
   puts $mig_prj_file {<!-- IMPORTANT: This is an internal file that has been generated by the MIG software. Any direct editing or changes made to this file may result in unpredictable behavior or data corruption. It is strongly advised that users do not edit the contents of this file. Re-run the MIG GUI with the required settings if any of the options provided below need to be altered. -->}
   puts $mig_prj_file {<Project NoOfControllers="1" >}
   puts $mig_prj_file {    <ModuleName>sim_node_mig_7series_0_1</ModuleName>}
   puts $mig_prj_file {    <dci_inouts_inputs>1</dci_inouts_inputs>}
   puts $mig_prj_file {    <dci_inputs>1</dci_inputs>}
   puts $mig_prj_file {    <Debug_En>OFF</Debug_En>}
   puts $mig_prj_file {    <DataDepth_En>1024</DataDepth_En>}
   puts $mig_prj_file {    <LowPower_En>ON</LowPower_En>}
   puts $mig_prj_file {    <XADC_En>Enabled</XADC_En>}
   puts $mig_prj_file {    <TargetFPGA>xc7a100t-csg324/-1</TargetFPGA>}
   puts $mig_prj_file {    <Version>2.4</Version>}
   puts $mig_prj_file {    <SystemClock>No Buffer</SystemClock>}
   puts $mig_prj_file {    <ReferenceClock>Use System Clock</ReferenceClock>}
   puts $mig_prj_file {    <SysResetPolarity>ACTIVE LOW</SysResetPolarity>}
   puts $mig_prj_file {    <BankSelectionFlag>FALSE</BankSelectionFlag>}
   puts $mig_prj_file {    <InternalVref>1</InternalVref>}
   puts $mig_prj_file {    <dci_hr_inouts_inputs>50 Ohms</dci_hr_inouts_inputs>}
   puts $mig_prj_file {    <dci_cascade>0</dci_cascade>}
   puts $mig_prj_file {    <FPGADevice>}
   puts $mig_prj_file {        <selected>7a/xc7a100ti-csg324</selected>}
   puts $mig_prj_file {    </FPGADevice>}
   puts $mig_prj_file {    <Controller number="0" >}
   puts $mig_prj_file {        <MemoryDevice>DDR2_SDRAM/Components/MT47H64M16HR-25E</MemoryDevice>}
   puts $mig_prj_file {        <TimePeriod>3333</TimePeriod>}
   puts $mig_prj_file {        <VccAuxIO>1.8V</VccAuxIO>}
   puts $mig_prj_file {        <PHYRatio>2:1</PHYRatio>}
   puts $mig_prj_file {        <InputClkFreq>200.02</InputClkFreq>}
   puts $mig_prj_file {        <UIExtraClocks>0</UIExtraClocks>}
   puts $mig_prj_file {        <MMCM_VCO>1200</MMCM_VCO>}
   puts $mig_prj_file {        <MMCMClkOut0> 1.000</MMCMClkOut0>}
   puts $mig_prj_file {        <MMCMClkOut1>1</MMCMClkOut1>}
   puts $mig_prj_file {        <MMCMClkOut2>1</MMCMClkOut2>}
   puts $mig_prj_file {        <MMCMClkOut3>1</MMCMClkOut3>}
   puts $mig_prj_file {        <MMCMClkOut4>1</MMCMClkOut4>}
   puts $mig_prj_file {        <DataWidth>16</DataWidth>}
   puts $mig_prj_file {        <DeepMemory>1</DeepMemory>}
   puts $mig_prj_file {        <DataMask>1</DataMask>}
   puts $mig_prj_file {        <ECC>Disabled</ECC>}
   puts $mig_prj_file {        <Ordering>Strict</Ordering>}
   puts $mig_prj_file {        <CustomPart>FALSE</CustomPart>}
   puts $mig_prj_file {        <NewPartName></NewPartName>}
   puts $mig_prj_file {        <RowAddress>13</RowAddress>}
   puts $mig_prj_file {        <ColAddress>10</ColAddress>}
   puts $mig_prj_file {        <BankAddress>3</BankAddress>}
   puts $mig_prj_file {        <C0_MEM_SIZE>134217728</C0_MEM_SIZE>}
   puts $mig_prj_file {        <UserMemoryAddressMap>BANK_ROW_COLUMN</UserMemoryAddressMap>}
   puts $mig_prj_file {        <PinSelection>}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="M4" SLEW="" name="ddr2_addr[0]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="R2" SLEW="" name="ddr2_addr[10]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="K5" SLEW="" name="ddr2_addr[11]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="N6" SLEW="" name="ddr2_addr[12]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="P4" SLEW="" name="ddr2_addr[1]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="M6" SLEW="" name="ddr2_addr[2]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="T1" SLEW="" name="ddr2_addr[3]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="L3" SLEW="" name="ddr2_addr[4]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="P5" SLEW="" name="ddr2_addr[5]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="M2" SLEW="" name="ddr2_addr[6]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="N1" SLEW="" name="ddr2_addr[7]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="L4" SLEW="" name="ddr2_addr[8]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="N5" SLEW="" name="ddr2_addr[9]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="P2" SLEW="" name="ddr2_ba[0]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="P3" SLEW="" name="ddr2_ba[1]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="R1" SLEW="" name="ddr2_ba[2]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="L1" SLEW="" name="ddr2_cas_n" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="DIFF_SSTL18_II" PADName="L5" SLEW="" name="ddr2_ck_n[0]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="DIFF_SSTL18_II" PADName="L6" SLEW="" name="ddr2_ck_p[0]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="M1" SLEW="" name="ddr2_cke[0]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="K6" SLEW="" name="ddr2_cs_n[0]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="T6" SLEW="" name="ddr2_dm[0]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="U1" SLEW="" name="ddr2_dm[1]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="R7" SLEW="" name="ddr2_dq[0]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="V5" SLEW="" name="ddr2_dq[10]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="U4" SLEW="" name="ddr2_dq[11]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="V4" SLEW="" name="ddr2_dq[12]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="T4" SLEW="" name="ddr2_dq[13]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="V1" SLEW="" name="ddr2_dq[14]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="T3" SLEW="" name="ddr2_dq[15]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="V6" SLEW="" name="ddr2_dq[1]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="R8" SLEW="" name="ddr2_dq[2]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="U7" SLEW="" name="ddr2_dq[3]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="V7" SLEW="" name="ddr2_dq[4]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="R6" SLEW="" name="ddr2_dq[5]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="U6" SLEW="" name="ddr2_dq[6]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="R5" SLEW="" name="ddr2_dq[7]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="T5" SLEW="" name="ddr2_dq[8]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="U3" SLEW="" name="ddr2_dq[9]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="DIFF_SSTL18_II" PADName="V9" SLEW="" name="ddr2_dqs_n[0]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="DIFF_SSTL18_II" PADName="V2" SLEW="" name="ddr2_dqs_n[1]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="DIFF_SSTL18_II" PADName="U9" SLEW="" name="ddr2_dqs_p[0]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="DIFF_SSTL18_II" PADName="U2" SLEW="" name="ddr2_dqs_p[1]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="M3" SLEW="" name="ddr2_odt[0]" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="N4" SLEW="" name="ddr2_ras_n" IN_TERM="" />}
   puts $mig_prj_file {            <Pin VCCAUX_IO="" IOSTANDARD="SSTL18_II" PADName="N2" SLEW="" name="ddr2_we_n" IN_TERM="" />}
   puts $mig_prj_file {        </PinSelection>}
   puts $mig_prj_file {        <System_Control>}
   puts $mig_prj_file {            <Pin PADName="No connect" Bank="Select Bank" name="sys_rst" />}
   puts $mig_prj_file {            <Pin PADName="No connect" Bank="Select Bank" name="init_calib_complete" />}
   puts $mig_prj_file {            <Pin PADName="No connect" Bank="Select Bank" name="tg_compare_error" />}
   puts $mig_prj_file {        </System_Control>}
   puts $mig_prj_file {        <TimingParameters>}
   puts $mig_prj_file {            <Parameters twtr="7.5" trrd="10" trefi="7.8" tfaw="45" trtp="7.5" trfc="127.5" trp="12.5" tras="40" trcd="15" />}
   puts $mig_prj_file {        </TimingParameters>}
   puts $mig_prj_file {        <mrBurstLength name="Burst Length" >8</mrBurstLength>}
   puts $mig_prj_file {        <mrBurstType name="Burst Type" >Sequential</mrBurstType>}
   puts $mig_prj_file {        <mrCasLatency name="CAS Latency" >5</mrCasLatency>}
   puts $mig_prj_file {        <mrMode name="Mode" >Normal</mrMode>}
   puts $mig_prj_file {        <mrDllReset name="DLL Reset" >No</mrDllReset>}
   puts $mig_prj_file {        <mrPdMode name="PD Mode" >Fast exit</mrPdMode>}
   puts $mig_prj_file {        <mrWriteRecovery name="Write Recovery" >5</mrWriteRecovery>}
   puts $mig_prj_file {        <emrDllEnable name="DLL Enable" >Enable-Normal</emrDllEnable>}
   puts $mig_prj_file {        <emrOutputDriveStrength name="Output Drive Strength" >Fullstrength</emrOutputDriveStrength>}
   puts $mig_prj_file {        <emrCSSelection name="Controller Chip Select Pin" >Enable</emrCSSelection>}
   puts $mig_prj_file {        <emrCKSelection name="Memory Clock Selection" >1</emrCKSelection>}
   puts $mig_prj_file {        <emrRTT name="RTT (nominal) - ODT" >50ohms</emrRTT>}
   puts $mig_prj_file {        <emrPosted name="Additive Latency (AL)" >0</emrPosted>}
   puts $mig_prj_file {        <emrOCD name="OCD Operation" >OCD Exit</emrOCD>}
   puts $mig_prj_file {        <emrDQS name="DQS# Enable" >Enable</emrDQS>}
   puts $mig_prj_file {        <emrRDQS name="RDQS Enable" >Disable</emrRDQS>}
   puts $mig_prj_file {        <emrOutputs name="Outputs" >Enable</emrOutputs>}
   puts $mig_prj_file {        <PortInterface>AXI</PortInterface>}
   puts $mig_prj_file {        <AXIParameters>}
   puts $mig_prj_file {            <C0_C_RD_WR_ARB_ALGORITHM>RD_PRI_REG</C0_C_RD_WR_ARB_ALGORITHM>}
   puts $mig_prj_file {            <C0_S_AXI_ADDR_WIDTH>27</C0_S_AXI_ADDR_WIDTH>}
   puts $mig_prj_file {            <C0_S_AXI_DATA_WIDTH>64</C0_S_AXI_DATA_WIDTH>}
   puts $mig_prj_file {            <C0_S_AXI_ID_WIDTH>1</C0_S_AXI_ID_WIDTH>}
   puts $mig_prj_file {            <C0_S_AXI_SUPPORTS_NARROW_BURST>0</C0_S_AXI_SUPPORTS_NARROW_BURST>}
   puts $mig_prj_file {        </AXIParameters>}
   puts $mig_prj_file {    </Controller>}
   puts $mig_prj_file {</Project>}

   close $mig_prj_file
}
# End of write_mig_file_sim_node_mig_7series_0_1()



##################################################################
# DESIGN PROCs
##################################################################



# Procedure to create entire design; Provide argument to make
# procedure reusable. If parentCell is "", will use root.
proc create_root_design { parentCell } {

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     puts "ERROR: Unable to find parent cell <$parentCell>!"
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     puts "ERROR: Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set DDR2 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:ddrx_rtl:1.0 DDR2 ]

  # Create ports
  set i_HREF [ create_bd_port -dir I i_HREF ]
  set i_PCLK [ create_bd_port -dir I i_PCLK ]
  set i_SDATA [ create_bd_port -dir I -from 9 -to 0 i_SDATA ]
  set i_VSYNC [ create_bd_port -dir I i_VSYNC ]
  set i_btn_config [ create_bd_port -dir I i_btn_config ]
  set i_config_bypass [ create_bd_port -dir I i_config_bypass ]
  set o_PWDN [ create_bd_port -dir O o_PWDN ]
  set o_SIOC [ create_bd_port -dir O o_SIOC ]
  set o_SIOD [ create_bd_port -dir IO o_SIOD ]
  set o_XCLK [ create_bd_port -dir O -type clk o_XCLK ]
  set o_capture_state_debug [ create_bd_port -dir O -from 3 -to 0 o_capture_state_debug ]
  set o_debug_state [ create_bd_port -dir O -from 2 -to 0 o_debug_state ]
  set o_hsync [ create_bd_port -dir O o_hsync ]
  set o_i2c_busy [ create_bd_port -dir O o_i2c_busy ]
  set o_locked_up [ create_bd_port -dir O o_locked_up ]
  set o_sioc_state_debug [ create_bd_port -dir O -from 2 -to 0 o_sioc_state_debug ]
  set o_siod_state_debug [ create_bd_port -dir O -from 4 -to 0 o_siod_state_debug ]
  set o_vga_data [ create_bd_port -dir O -from 11 -to 0 o_vga_data ]
  set o_vsync [ create_bd_port -dir O o_vsync ]
  set reset_rtl [ create_bd_port -dir I -type rst reset_rtl ]
  set sys_clk [ create_bd_port -dir I -type clk sys_clk ]
  set_property -dict [ list \
CONFIG.FREQ_HZ {100000000} \
 ] $sys_clk

  # Create instance: OV5642_IF_0, and set properties
  set OV5642_IF_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:OV5642_IF:1.0 OV5642_IF_0 ]
  set_property -dict [ list \
CONFIG.C_M00_AXI_TARGET_SLAVE_BASE_ADDR {0x80000000} \
 ] $OV5642_IF_0

  # Create instance: VGA_IF_0, and set properties
  set VGA_IF_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:VGA_IF:1.0 VGA_IF_0 ]
  set_property -dict [ list \
CONFIG.C_M00_AXI_TARGET_SLAVE_BASE_ADDR {0x80000000} \
 ] $VGA_IF_0

  # Create instance: axi_mem_intercon, and set properties
  set axi_mem_intercon [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_mem_intercon ]
  set_property -dict [ list \
CONFIG.NUM_MI {5} \
CONFIG.NUM_SI {2} \
 ] $axi_mem_intercon

  # Create instance: clk_wiz_0, and set properties
  set clk_wiz_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:5.2 clk_wiz_0 ]
  set_property -dict [ list \
CONFIG.CLKOUT2_JITTER {114.829} \
CONFIG.CLKOUT2_PHASE_ERROR {98.575} \
CONFIG.CLKOUT2_REQUESTED_OUT_FREQ {200} \
CONFIG.CLKOUT2_USED {true} \
CONFIG.CLKOUT3_JITTER {175.402} \
CONFIG.CLKOUT3_PHASE_ERROR {98.575} \
CONFIG.CLKOUT3_REQUESTED_OUT_FREQ {25} \
CONFIG.CLKOUT3_USED {true} \
CONFIG.MMCM_CLKOUT1_DIVIDE {5} \
CONFIG.MMCM_CLKOUT2_DIVIDE {40} \
CONFIG.MMCM_DIVCLK_DIVIDE {1} \
CONFIG.NUM_OUT_CLKS {3} \
CONFIG.RESET_PORT {resetn} \
CONFIG.RESET_TYPE {ACTIVE_LOW} \
 ] $clk_wiz_0

  # Create instance: mig_7series_0, and set properties
  set mig_7series_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:mig_7series:2.4 mig_7series_0 ]

  # Generate the PRJ File for MIG
  set str_mig_folder [get_property IP_DIR [ get_ips [ get_property CONFIG.Component_Name $mig_7series_0 ] ] ]
  set str_mig_file_name mig_a.prj
  set str_mig_file_path ${str_mig_folder}/${str_mig_file_name}

  write_mig_file_sim_node_mig_7series_0_1 $str_mig_file_path

  set_property -dict [ list \
CONFIG.BOARD_MIG_PARAM {Custom} \
CONFIG.RESET_BOARD_INTERFACE {Custom} \
CONFIG.XML_INPUT_FILE {mig_a.prj} \
 ] $mig_7series_0

  # Create instance: rst_mig_7series_0_150M, and set properties
  set rst_mig_7series_0_150M [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 rst_mig_7series_0_150M ]

  # Create interface connections
  connect_bd_intf_net -intf_net OV5642_IF_0_M00_AXI [get_bd_intf_pins OV5642_IF_0/M00_AXI] [get_bd_intf_pins axi_mem_intercon/S00_AXI]
  connect_bd_intf_net -intf_net VGA_IF_0_M00_AXI [get_bd_intf_pins VGA_IF_0/M00_AXI] [get_bd_intf_pins axi_mem_intercon/S01_AXI]
  connect_bd_intf_net -intf_net axi_mem_intercon_M00_AXI [get_bd_intf_pins axi_mem_intercon/M00_AXI] [get_bd_intf_pins mig_7series_0/S_AXI]
  connect_bd_intf_net -intf_net axi_mem_intercon_M01_AXI [get_bd_intf_pins VGA_IF_0/S00_AXI] [get_bd_intf_pins axi_mem_intercon/M01_AXI]
  connect_bd_intf_net -intf_net axi_mem_intercon_M02_AXI [get_bd_intf_pins VGA_IF_0/S_AXI_INTR] [get_bd_intf_pins axi_mem_intercon/M02_AXI]
  connect_bd_intf_net -intf_net axi_mem_intercon_M03_AXI [get_bd_intf_pins OV5642_IF_0/S00_AXI] [get_bd_intf_pins axi_mem_intercon/M03_AXI]
  connect_bd_intf_net -intf_net axi_mem_intercon_M04_AXI [get_bd_intf_pins OV5642_IF_0/S_AXI_INTR] [get_bd_intf_pins axi_mem_intercon/M04_AXI]
  connect_bd_intf_net -intf_net mig_7series_0_DDR2 [get_bd_intf_ports DDR2] [get_bd_intf_pins mig_7series_0/DDR2]

  # Create port connections
  connect_bd_net -net Net [get_bd_ports o_SIOD] [get_bd_pins OV5642_IF_0/o_SIOD]
  connect_bd_net -net OV5642_IF_0_o_PWDN [get_bd_ports o_PWDN] [get_bd_pins OV5642_IF_0/o_PWDN]
  connect_bd_net -net OV5642_IF_0_o_SIOC [get_bd_ports o_SIOC] [get_bd_pins OV5642_IF_0/o_SIOC]
  connect_bd_net -net OV5642_IF_0_o_capture_state_debug [get_bd_ports o_capture_state_debug] [get_bd_pins OV5642_IF_0/o_capture_state_debug]
  connect_bd_net -net OV5642_IF_0_o_debug_state [get_bd_ports o_debug_state] [get_bd_pins OV5642_IF_0/o_debug_state]
  connect_bd_net -net OV5642_IF_0_o_i2c_busy [get_bd_ports o_i2c_busy] [get_bd_pins OV5642_IF_0/o_i2c_busy]
  connect_bd_net -net OV5642_IF_0_o_sioc_state_debug [get_bd_ports o_sioc_state_debug] [get_bd_pins OV5642_IF_0/o_sioc_state_debug]
  connect_bd_net -net OV5642_IF_0_o_siod_state_debug [get_bd_ports o_siod_state_debug] [get_bd_pins OV5642_IF_0/o_siod_state_debug]
  connect_bd_net -net OV5642_IF_0_o_write_done_irq [get_bd_pins OV5642_IF_0/o_write_done_irq] [get_bd_pins VGA_IF_0/i_start_display_irq]
  connect_bd_net -net VGA_IF_0_o_hsync [get_bd_ports o_hsync] [get_bd_pins VGA_IF_0/o_hsync]
  connect_bd_net -net VGA_IF_0_o_vga_data [get_bd_ports o_vga_data] [get_bd_pins VGA_IF_0/o_vga_data]
  connect_bd_net -net VGA_IF_0_o_vsync [get_bd_ports o_vsync] [get_bd_pins VGA_IF_0/o_vsync]
  connect_bd_net -net clk_wiz_0_clk_out1 [get_bd_pins OV5642_IF_0/i_config_capture_clk] [get_bd_pins clk_wiz_0/clk_out1]
  connect_bd_net -net clk_wiz_0_clk_out2 [get_bd_pins clk_wiz_0/clk_out2] [get_bd_pins mig_7series_0/sys_clk_i]
  connect_bd_net -net clk_wiz_0_clk_out3 [get_bd_ports o_XCLK] [get_bd_pins VGA_IF_0/i_VGA_CLK] [get_bd_pins clk_wiz_0/clk_out3]
  connect_bd_net -net clk_wiz_0_locked [get_bd_ports o_locked_up] [get_bd_pins clk_wiz_0/locked]
  connect_bd_net -net i_HREF_1 [get_bd_ports i_HREF] [get_bd_pins OV5642_IF_0/i_HREF]
  connect_bd_net -net i_PCLK_1 [get_bd_ports i_PCLK] [get_bd_pins OV5642_IF_0/i_PCLK]
  connect_bd_net -net i_SDATA_1 [get_bd_ports i_SDATA] [get_bd_pins OV5642_IF_0/i_SDATA]
  connect_bd_net -net i_VSYNC_1 [get_bd_ports i_VSYNC] [get_bd_pins OV5642_IF_0/i_VSYNC]
  connect_bd_net -net i_btn_config_1 [get_bd_ports i_btn_config] [get_bd_pins OV5642_IF_0/i_btn_config]
  connect_bd_net -net i_config_bypass_1 [get_bd_ports i_config_bypass] [get_bd_pins OV5642_IF_0/i_config_bypass]
  connect_bd_net -net mig_7series_0_mmcm_locked [get_bd_pins mig_7series_0/mmcm_locked] [get_bd_pins rst_mig_7series_0_150M/dcm_locked]
  connect_bd_net -net mig_7series_0_ui_clk [get_bd_pins OV5642_IF_0/i_axi_master_clk] [get_bd_pins OV5642_IF_0/i_axi_slave_clk] [get_bd_pins OV5642_IF_0/m00_axi_aclk] [get_bd_pins OV5642_IF_0/s00_axi_aclk] [get_bd_pins OV5642_IF_0/s_axi_intr_aclk] [get_bd_pins VGA_IF_0/i_axi_master_clk] [get_bd_pins VGA_IF_0/i_axi_slave_clk] [get_bd_pins VGA_IF_0/m00_axi_aclk] [get_bd_pins VGA_IF_0/s00_axi_aclk] [get_bd_pins VGA_IF_0/s_axi_intr_aclk] [get_bd_pins axi_mem_intercon/ACLK] [get_bd_pins axi_mem_intercon/M00_ACLK] [get_bd_pins axi_mem_intercon/M01_ACLK] [get_bd_pins axi_mem_intercon/M02_ACLK] [get_bd_pins axi_mem_intercon/M03_ACLK] [get_bd_pins axi_mem_intercon/M04_ACLK] [get_bd_pins axi_mem_intercon/S00_ACLK] [get_bd_pins axi_mem_intercon/S01_ACLK] [get_bd_pins mig_7series_0/ui_clk] [get_bd_pins rst_mig_7series_0_150M/slowest_sync_clk]
  connect_bd_net -net mig_7series_0_ui_clk_sync_rst [get_bd_pins mig_7series_0/ui_clk_sync_rst] [get_bd_pins rst_mig_7series_0_150M/ext_reset_in]
  connect_bd_net -net reset_rtl_1 [get_bd_ports reset_rtl] [get_bd_pins OV5642_IF_0/i_reset_n] [get_bd_pins VGA_IF_0/i_reset_n] [get_bd_pins clk_wiz_0/resetn] [get_bd_pins mig_7series_0/sys_rst]
  connect_bd_net -net rst_mig_7series_0_150M_interconnect_aresetn [get_bd_pins axi_mem_intercon/ARESETN] [get_bd_pins rst_mig_7series_0_150M/interconnect_aresetn]
  connect_bd_net -net rst_mig_7series_0_150M_peripheral_aresetn [get_bd_pins OV5642_IF_0/m00_axi_aresetn] [get_bd_pins OV5642_IF_0/s00_axi_aresetn] [get_bd_pins OV5642_IF_0/s_axi_intr_aresetn] [get_bd_pins VGA_IF_0/m00_axi_aresetn] [get_bd_pins VGA_IF_0/s00_axi_aresetn] [get_bd_pins VGA_IF_0/s_axi_intr_aresetn] [get_bd_pins axi_mem_intercon/M00_ARESETN] [get_bd_pins axi_mem_intercon/M01_ARESETN] [get_bd_pins axi_mem_intercon/M02_ARESETN] [get_bd_pins axi_mem_intercon/M03_ARESETN] [get_bd_pins axi_mem_intercon/M04_ARESETN] [get_bd_pins axi_mem_intercon/S00_ARESETN] [get_bd_pins axi_mem_intercon/S01_ARESETN] [get_bd_pins mig_7series_0/aresetn] [get_bd_pins rst_mig_7series_0_150M/peripheral_aresetn]
  connect_bd_net -net sys_clk_1 [get_bd_ports sys_clk] [get_bd_pins clk_wiz_0/clk_in1]

  # Create address segments
  create_bd_addr_seg -range 0x10000 -offset 0x44A00000 [get_bd_addr_spaces OV5642_IF_0/M00_AXI] [get_bd_addr_segs OV5642_IF_0/S00_AXI/S00_AXI_reg] SEG_OV5642_IF_0_S00_AXI_reg
  create_bd_addr_seg -range 0x10000 -offset 0x44A10000 [get_bd_addr_spaces OV5642_IF_0/M00_AXI] [get_bd_addr_segs OV5642_IF_0/S_AXI_INTR/S_AXI_INTR_reg] SEG_OV5642_IF_0_S_AXI_INTR_reg
  create_bd_addr_seg -range 0x10000 -offset 0x44A20000 [get_bd_addr_spaces OV5642_IF_0/M00_AXI] [get_bd_addr_segs VGA_IF_0/S00_AXI/S00_AXI_reg] SEG_VGA_IF_0_S00_AXI_reg
  create_bd_addr_seg -range 0x10000 -offset 0x44A30000 [get_bd_addr_spaces OV5642_IF_0/M00_AXI] [get_bd_addr_segs VGA_IF_0/S_AXI_INTR/S_AXI_INTR_reg] SEG_VGA_IF_0_S_AXI_INTR_reg
  create_bd_addr_seg -range 0x8000000 -offset 0x80000000 [get_bd_addr_spaces OV5642_IF_0/M00_AXI] [get_bd_addr_segs mig_7series_0/memmap/memaddr] SEG_mig_7series_0_memaddr
  create_bd_addr_seg -range 0x10000 -offset 0x44A00000 [get_bd_addr_spaces VGA_IF_0/M00_AXI] [get_bd_addr_segs OV5642_IF_0/S00_AXI/S00_AXI_reg] SEG_OV5642_IF_0_S00_AXI_reg
  create_bd_addr_seg -range 0x10000 -offset 0x44A10000 [get_bd_addr_spaces VGA_IF_0/M00_AXI] [get_bd_addr_segs OV5642_IF_0/S_AXI_INTR/S_AXI_INTR_reg] SEG_OV5642_IF_0_S_AXI_INTR_reg
  create_bd_addr_seg -range 0x10000 -offset 0x44A20000 [get_bd_addr_spaces VGA_IF_0/M00_AXI] [get_bd_addr_segs VGA_IF_0/S00_AXI/S00_AXI_reg] SEG_VGA_IF_0_S00_AXI_reg
  create_bd_addr_seg -range 0x10000 -offset 0x44A30000 [get_bd_addr_spaces VGA_IF_0/M00_AXI] [get_bd_addr_segs VGA_IF_0/S_AXI_INTR/S_AXI_INTR_reg] SEG_VGA_IF_0_S_AXI_INTR_reg
  create_bd_addr_seg -range 0x8000000 -offset 0x80000000 [get_bd_addr_spaces VGA_IF_0/M00_AXI] [get_bd_addr_segs mig_7series_0/memmap/memaddr] SEG_mig_7series_0_memaddr

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   guistr: "# # String gsaved with Nlview 6.5.5  2015-06-26 bk=1.3371 VDI=38 GEI=35 GUI=JA:1.6
#  -string -flagsOSRD
preplace port reset_rtl -pg 1 -y 670 -defaultsOSRD
preplace port i_PCLK -pg 1 -y 750 -defaultsOSRD
preplace port i_btn_config -pg 1 -y 790 -defaultsOSRD
preplace port o_SIOC -pg 1 -y 750 -defaultsOSRD
preplace port o_SIOD -pg 1 -y 770 -defaultsOSRD
preplace port i_HREF -pg 1 -y 730 -defaultsOSRD
preplace port sys_clk -pg 1 -y 650 -defaultsOSRD
preplace port DDR2 -pg 1 -y 70 -defaultsOSRD
preplace port o_locked_up -pg 1 -y 610 -defaultsOSRD
preplace port o_vsync -pg 1 -y 340 -defaultsOSRD
preplace port i_config_bypass -pg 1 -y 810 -defaultsOSRD
preplace port o_XCLK -pg 1 -y 590 -defaultsOSRD
preplace port o_PWDN -pg 1 -y 730 -defaultsOSRD
preplace port o_i2c_busy -pg 1 -y 830 -defaultsOSRD
preplace port o_hsync -pg 1 -y 320 -defaultsOSRD
preplace port i_VSYNC -pg 1 -y 770 -defaultsOSRD
preplace portBus o_capture_state_debug -pg 1 -y 890 -defaultsOSRD
preplace portBus o_sioc_state_debug -pg 1 -y 850 -defaultsOSRD
preplace portBus o_vga_data -pg 1 -y 360 -defaultsOSRD
preplace portBus o_siod_state_debug -pg 1 -y 870 -defaultsOSRD
preplace portBus i_SDATA -pg 1 -y 870 -defaultsOSRD
preplace portBus o_debug_state -pg 1 -y 810 -defaultsOSRD
preplace inst rst_mig_7series_0_150M -pg 1 -lvl 1 -y 100 -defaultsOSRD
preplace inst mig_7series_0 -pg 1 -lvl 3 -y 110 -defaultsOSRD
preplace inst OV5642_IF_0 -pg 1 -lvl 3 -y 830 -defaultsOSRD
preplace inst VGA_IF_0 -pg 1 -lvl 3 -y 390 -defaultsOSRD
preplace inst clk_wiz_0 -pg 1 -lvl 2 -y 660 -defaultsOSRD
preplace inst axi_mem_intercon -pg 1 -lvl 2 -y 280 -defaultsOSRD
preplace netloc axi_mem_intercon_M01_AXI 1 2 1 N
preplace netloc mig_7series_0_mmcm_locked 1 0 4 30 190 NJ 20 NJ 20 1160
preplace netloc mig_7series_0_DDR2 1 3 1 NJ
preplace netloc OV5642_IF_0_o_write_done_irq 1 2 2 820 580 1160
preplace netloc clk_wiz_0_locked 1 2 2 NJ 600 NJ
preplace netloc OV5642_IF_0_o_sioc_state_debug 1 3 1 NJ
preplace netloc i_btn_config_1 1 0 3 NJ 780 NJ 780 NJ
preplace netloc i_VSYNC_1 1 0 3 NJ 770 NJ 770 NJ
preplace netloc i_PCLK_1 1 0 3 NJ 750 NJ 750 NJ
preplace netloc axi_mem_intercon_M03_AXI 1 2 1 720
preplace netloc OV5642_IF_0_o_capture_state_debug 1 3 1 NJ
preplace netloc OV5642_IF_0_M00_AXI 1 1 3 380 40 NJ 200 1170
preplace netloc sys_clk_1 1 0 2 NJ 650 NJ
preplace netloc axi_mem_intercon_M00_AXI 1 2 1 690
preplace netloc OV5642_IF_0_o_debug_state 1 3 1 NJ
preplace netloc OV5642_IF_0_o_SIOC 1 3 1 NJ
preplace netloc i_SDATA_1 1 0 3 NJ 870 NJ 870 NJ
preplace netloc axi_mem_intercon_M02_AXI 1 2 1 N
preplace netloc mig_7series_0_ui_clk 1 0 4 20 200 390 510 810 570 1180
preplace netloc i_config_bypass_1 1 0 3 NJ 810 NJ 810 NJ
preplace netloc OV5642_IF_0_o_PWDN 1 3 1 NJ
preplace netloc clk_wiz_0_clk_out1 1 2 1 710
preplace netloc VGA_IF_0_o_vsync 1 3 1 NJ
preplace netloc VGA_IF_0_o_vga_data 1 3 1 NJ
preplace netloc clk_wiz_0_clk_out2 1 2 1 700
preplace netloc rst_mig_7series_0_150M_peripheral_aresetn 1 1 2 360 520 770
preplace netloc mig_7series_0_ui_clk_sync_rst 1 0 4 30 10 NJ 10 NJ 10 1180
preplace netloc Net 1 3 1 N
preplace netloc clk_wiz_0_clk_out3 1 2 2 730 590 NJ
preplace netloc VGA_IF_0_o_hsync 1 3 1 NJ
preplace netloc VGA_IF_0_M00_AXI 1 1 3 390 50 NJ 210 1160
preplace netloc OV5642_IF_0_o_siod_state_debug 1 3 1 NJ
preplace netloc OV5642_IF_0_o_i2c_busy 1 3 1 NJ
preplace netloc i_HREF_1 1 0 3 NJ 730 NJ 740 NJ
preplace netloc rst_mig_7series_0_150M_interconnect_aresetn 1 1 1 380
preplace netloc axi_mem_intercon_M04_AXI 1 2 1 740
preplace netloc reset_rtl_1 1 0 3 NJ 670 380 760 760
levelinfo -pg 1 0 200 540 990 1200 -top 0 -bot 1060
",
}

  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
}
# End of create_root_design()


##################################################################
# MAIN FLOW
##################################################################

create_root_design ""


